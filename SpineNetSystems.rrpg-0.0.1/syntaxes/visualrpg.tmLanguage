<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>comment</key>
	<string>?i: has to be added everywhere because rpg is case insensitive; NB: order of matching matters</string>
	<key>fileTypes</key>
	<array>
		<string>rpg</string>
		<string>rpgle</string>
		<string>vr</string>
		<string>sqlrpgle</string>
	</array>
	<key>name</key>
	<string>rpg - Punchcard</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>begin</key>
			<string>\/\*</string>
			<key>end</key>
			<string>\*\/</string>
			<key>name</key>
			<string>comment.block.rpg</string>
		</dict>

		<dict>
			<key>begin</key>
			<string>\/\/</string>
			<key>end</key>
			<string>\n</string>
			<key>name</key>
			<string>comment.block.rpg</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>(?i)^[ \t]{0,5}[ hfdc][*]</string>
			<key>end</key>
			<string>\n</string>
			<key>name</key>
			<string>comment.block.rpg</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#preprocessor-rule-enabled</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#preprocessor-rule-disabled</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#preprocessor-rule-other</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>built-in constants</string>
			<key>match</key>
			<string>(?i:(r8|r4|\.TRUE\.|\.FALSE\.))</string>
			<key>name</key>
			<string>constant.language.rpg</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>numbers</string>
			<key>match</key>
			<string>\b[\+\-]?[0-9]+\.?[0-9a-zA-Z_]*\b</string>
			<key>name</key>
			<string>constant.numeric.rpg</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>(?x:								# extended mode
					^
					\s*									# start of line and possibly some space
					([a-zA-Z\(\)]*)(?&lt;!end)				# 1: possibly some type specification but not the word end
					\s*									# possibly some space
					(?i:(function|subroutine))\b		# 2: function or subroutine
					\s+									# some space
					([A-Za-z_][A-Za-z0-9_]*)			# 3: name
					)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.rpg</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>storage.type.function.rpg</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.rpg</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>First line of function/subroutine definition</string>
			<key>end</key>
			<string>(?x:									# extended mode
					((?i:end))							# 1: the word end
					(									# followed by
						$								# end of line
					|									# or
						\s*								# possibly some space
						(?i:(function|subroutine))		# 2: function or subroutine
						((\s+[A-Za-z_][A-Za-z0-9_]*)?)	# 3: possibly the name
					)
					)</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.rpg</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>storage.type.function.rpg</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.end.rpg</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.function.rpg</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\G\s*(\()</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.parameters.begin.rpg</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\)</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.parameters.end.rpg</string>
						</dict>
					</dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>captures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>variable.parameter.rpg</string>
								</dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>punctuation.separator.arguments.fortan</string>
								</dict>
							</dict>
							<key>match</key>
							<string>([^\s),]*)\s*(,)?</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
				<dict>
					<key>include</key>
					<string>source.rpg.modern</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>\b(?i:(integer|float|ind|zoned|packed|char|varchar))\b(?=.*::)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.rpg</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>Line of type specification</string>
			<key>end</key>
			<string>(?=!)|$</string>
			<key>name</key>
			<string>meta.specification.rpg</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>(?i)^[ \t]*(exec)\s+(sql)\b</string>
			<key>end</key>
			<string>\;</string>
			<key>name</key>
			<string>support.constant.rpg</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>SQL</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>comment</key>
			<string>statements controling the flow of the program</string>
			<key>match</key>
			<string>\b(?i:(to|do|dow|add|adddur|andeq|andge|andgt|andle|andlt|andne|begsr|cabeq|cabge|cabgt|catch|cable|cablt|cabne|call|callb|callp|case|caseeq|casege|casegt|casele|caselt|casene|cat|chain|check|clear|close|comp|define|DoWhile|delete|div|do|dou|dow|dsply|dump|endsr|end|endcs|enddo|endfor|endif|endtry|endmon|endsl|eval|evalr|except|exfmt|exsr|extrct|for|goto|if|ifeq|ifge|ifgt|ifle|iflt|ifne|in|iter|kfld|klist|leave|leavesr|lookup|monitor|move(p)|move|movel(p)|movel|mult|mvr|occur|onerror|open|oreq|orge|orgt|orle|orlt|orne|other|out|parm|plist|read|readc|reade|readp|readpe|scan|select|setgt|setll|setoff|seton|sorta|sub|subdur|subst|tag|test|time|try|unlock|update|when|wheneq|whenge|whengt|whenle|whenlt|whenne|write|xfoot|xlate|z-add|z-sub))\b</string>
			<key>name</key>
			<string>keyword.control.rpg</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>(?i)^[*]{2,2}(ctdata)?\ </string>
			<key>comment</key>
			<string>Compile time array in the bottom of the source file</string>
			<key>end</key>
			<string>(E-*-O-*-F)</string>
			<key>name</key>
			<string>string.quoted.single.rpg</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\.</string>
					<key>name</key>
					<string>constant.character.escape.rpg</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>comment</key>
			<string>programming units</string>
			<key>match</key>
			<string>\b(?i:(entry|include))\b</string>
			<key>name</key>
			<string>keyword.control.programming-units.rpg</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>i/o statements</string>
			<key>match</key>
			<string>\b(?i:(inquire|backspace|endfile|format))\b</string>
			<key>name</key>
			<string>keyword.control.io.rpg</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>operators</string>
			<key>match</key>
			<string>((?&lt;!\=)\=(?!\=)|\-|\+|\/\/|\/|(?!^)\*|::)</string>
			<key>name</key>
			<string>keyword.operator.rpg</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>logical operators</string>
			<key>match</key>
			<string>(?i:(\.and\.|\.or\.|\.eq\.|\.lt\.|\.le\.|\.gt\.|\.ge\.|\.ne\.|\.not\.|\.eqv\.|\.neqv\.))</string>
			<key>name</key>
			<string>keyword.operator.logical.rpg</string>
		</dict>
		<dict>
			<key>match</key>
			<string>(?i)[*](ON|OFF|ENTRY|ALL|BLANK|BLANKS|ZERO|ZEROS|HIVAL|LOVAL|PROC|USRCTL|LR)\b</string>
			<key>name</key>
			<string>constant.language.rpg</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>argument related intrisics</string>
			<key>match</key>
			<string>\b(?i:(present)(?=\())</string>
			<key>name</key>
			<string>keyword.other.instrisic.argument.rpg</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>numeric intrisics</string>
			<key>match</key>
			<string>\b(?i:(abs|aimag|aint|anint|cmplx|conjg|dble|dim|dprod|int|inz|max|min|mod|nint|real|sign|digits|epsilon|huge|maxexponent|minexponent|precision|radix|range|tiny)(?=\())</string>
			<key>name</key>
			<string>keyword.other.instrisic.numeric.rpg</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>character string intrinsics</string>
			<key>match</key>
			<string>\b(?i:(achar|adjustl|adjustr|%char|iachar|repeat|scan|string|verify|len)(?=\())</string>
			<key>name</key>
			<string>keyword.other.instrisic.string.rpg</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>mathematical intrisics</string>
			<key>match</key>
			<string>\b(?i:(((acos|asin|atan|atan2|cos|cosh|exp|log|log10|sin|sinh|sqrt|tan|tanh)(?=\())|(random_number|random_seed)))\b</string>
			<key>name</key>
			<string>keyword.other.instrisic.math.rpg</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>data kind intrinsics</string>
			<key>match</key>
			<string>\b(?i:(kind|selected_int_kind|selected_real_kind|transfer)(?=\())</string>
			<key>name</key>
			<string>keyword.other.instrisic.data.rpg</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>logical intrinsics</string>
			<key>match</key>
			<string>\b(?i:(logical)(?=\())</string>
			<key>name</key>
			<string>keyword.other.instrisic.logical.rpg</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>bit operations intrinsics</string>
			<key>match</key>
			<string>\b(?i:(((bit_size|btest|iand|ibclr|ibits|ibset|ieor|ior|ishift|ishiftc|not)(?=\())|mvbits))\b</string>
			<key>name</key>
			<string>keyword.other.instrisic.bit.rpg</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>floating point intrinsics</string>
			<key>match</key>
			<string>\b(?i:(exponent|fraction|nearest|rrspacing|scale|set_exponent|spacing)(?=\())</string>
			<key>name</key>
			<string>keyword.other.instrisic.floating-point.rpg</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>matrix/vector/array intrisics</string>
			<key>match</key>
			<string>\b(?i:(((dot_product|sum|matmul|transpose|all|any|count|maxval|minval|maxloc|minloc|product|sum|lbound|ubound|shape|size|merge|pack|unpack|reshape|spread|cshift|eoshift)(?=\())|(where|elsewhere|end\s*where)))\b</string>
			<key>name</key>
			<string>keyword.other.instrisic.array.rpg</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>other intrisics</string>
			<key>match</key>
			<string>\b(?i:(((dtime)(?=\())|(date_and_time|system_clock)))\b</string>
			<key>name</key>
			<string>keyword.other.instrisic.rpg</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>data specification</string>
			<key>match</key>
			<string>\b(?i:(integer|real|double\s+precision|complex|logical|character|block\sdata|operator|assignment))\b</string>
			<key>name</key>
			<string>storage.type.rpg</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>data type attributes</string>
			<key>match</key>
			<string>\b(?i:(dimension|common|equivalence|parameter|external|intrinsic|save|data|implicit\s*none|dcl-s|dcl-f|dcl-proc|ctl-opt|dcl-ds|dcl-subf|dcl-c|dcl-pr|dcl-pi|dcl-parm|dclfld|dclsrparm|/free|/end-free|type|BegFunc|BegConstructor|EndConstructor|BegClass|EndClass|EndFunc|BegSr|EndSr|DclNamespace|Using|Access|//free|//end-free))\b</string>
			<key>name</key>
			<string>storage.modifier.rpg</string>
		</dict>


		<dict>
			<key>comment</key>
			<string>data type attributes</string>
			<key>match</key>
			<string>\s*%(abs|addr|alloc|bitand|bitnot|bitor|workstn|usropn|bitxor|char|check|checkr|date|days|dec|dech|decpos|diff|div|editc|editflt|editw|elem|eof|equal|error|fields|float|found|graph|hours|int|inth|kds|len|lookup|minutes|months|mseconds|nullind|occur|paddr|paddr|parms|realloc|rem|replace|scan|seconds|shtdn|size|sqrt|status|str|str|str|subdt|this|time|timestamp|tlookup|triml|trimr|ucs2|uns|unsh|xfoot|xlate|years)</string>
			<key>name</key>
			<string>storage.modifier.rpg</string>
		</dict>



		<dict>
			<key>applyEndPatternLast</key>
			<integer>1</integer>
			<key>begin</key>
			<string>'</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.rpg</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>String</string>
			<key>end</key>
			<string>'</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.rpg</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.single.rpg</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>''</string>
					<key>name</key>
					<string>constant.character.escape.apostrophe.rpg</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>applyEndPatternLast</key>
			<integer>1</integer>
			<key>begin</key>
			<string>"</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.rpg</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>String</string>
			<key>end</key>
			<string>"</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.rpg</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.double.rpg</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>""</string>
					<key>name</key>
					<string>constant.character.escape.quote.rpg</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>^\s*#\s*(error|warning)\b</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.import.error.rpg</string>
				</dict>
			</dict>
			<key>end</key>
			<string>$\n?</string>
			<key>name</key>
			<string>meta.preprocessor.diagnostic.rpg</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?&gt;\\\s*\n)</string>
					<key>name</key>
					<string>punctuation.separator.continuation.rpg</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>begin</key>
			<string>^\s*#\s*(include|import)\b\s+</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.import.include.rpg</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=(?://|/\*))|$\n?</string>
			<key>name</key>
			<string>meta.preprocessor.rpg.include</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?&gt;\\\s*\n)</string>
					<key>name</key>
					<string>punctuation.separator.continuation.rpg</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>"</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.rpg</string>
						</dict>
					</dict>
					<key>end</key>
					<string>"</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.rpg</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.double.include.rpg</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>&lt;</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.rpg</string>
						</dict>
					</dict>
					<key>end</key>
					<string>&gt;</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.rpg</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.other.lt-gt.include.rpg</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>include</key>
			<string>#pragma-mark</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>^\s*#\s*(define|defined|elif|else|if|ifdef|ifndef|line|pragma|undef)\b</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.import.rpg</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=(?://|/\*))|$\n?</string>
			<key>name</key>
			<string>meta.preprocessor.rpg</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?&gt;\\\s*\n)</string>
					<key>name</key>
					<string>punctuation.separator.continuation.rpg</string>
				</dict>
			</array>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>disabled</key>
		<dict>
			<key>begin</key>
			<string>^\s*#\s*if(n?def)?\b.*$</string>
			<key>comment</key>
			<string>eat nested preprocessor if(def)s</string>
			<key>end</key>
			<string>^\s*#\s*endif\b.*$</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#disabled</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#pragma-mark</string>
				</dict>
			</array>
		</dict>
		<key>pragma-mark</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>meta.preprocessor.rpg</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.control.import.pragma.rpg</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>meta.toc-list.pragma-mark.rpg</string>
				</dict>
			</dict>
			<key>match</key>
			<string>^\s*(#\s*(pragma\s+mark)\s+(.*))</string>
			<key>name</key>
			<string>meta.section</string>
		</dict>
		<key>preprocessor-rule-disabled</key>
		<dict>
			<key>begin</key>
			<string>^\s*(#(if)\s+(0)\b).*</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>meta.preprocessor.rpg</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.control.import.if.rpg</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>constant.numeric.preprocessor.rpg</string>
				</dict>
			</dict>
			<key>end</key>
			<string>^\s*(#\s*(endif)\b)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>^\s*(#\s*(else)\b)</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>meta.preprocessor.rpg</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.control.import.else.rpg</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=^\s*#\s*endif\b.*$)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>$base</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string></string>
					<key>end</key>
					<string>(?=^\s*#\s*(else|endif)\b.*$)</string>
					<key>name</key>
					<string>comment.block.preprocessor.if-branch</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#disabled</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#pragma-mark</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>preprocessor-rule-enabled</key>
		<dict>
			<key>begin</key>
			<string>^\s*(#(if)\s+(0*1)\b)</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>meta.preprocessor.rpg</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.control.import.if.rpg</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>constant.numeric.preprocessor.rpg</string>
				</dict>
			</dict>
			<key>end</key>
			<string>^\s*(#\s*(endif)\b)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>^\s*(#\s*(else)\b).*</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>meta.preprocessor.rpg</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.control.import.else.rpg</string>
						</dict>
					</dict>
					<key>contentName</key>
					<string>comment.block.preprocessor.else-branch</string>
					<key>end</key>
					<string>(?=^\s*#\s*endif\b.*$)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#disabled</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#pragma-mark</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string></string>
					<key>end</key>
					<string>(?=^\s*#\s*(else|endif)\b.*$)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>$base</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>preprocessor-rule-other</key>
		<dict>
			<key>begin</key>
			<string>^\s*(#\s*(if(n?def)?)\b.*?(?:(?=(?://|/\*))|$))</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>meta.preprocessor.rpg</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.control.import.rpg</string>
				</dict>
			</dict>
			<key>end</key>
			<string>^\s*(#\s*(endif)\b).*$</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$base</string>
				</dict>
			</array>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.rpg</string>
	<key>uuid</key>
	<string>45253F88-F7CC-49C5-9C32-F3FADD2AB579</string>
</dict>
</plist>
